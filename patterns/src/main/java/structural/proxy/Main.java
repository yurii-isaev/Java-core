package structural.proxy;

/**
 * Плюсы паттерна Proxy:
 * 1. Контроль доступа:
 * Прокси может контролировать доступ к реальному объекту,
 * предоставляя дополнительную логику проверки прав доступа.
 * Например, прокси может проверять разрешения пользователя перед выполнением операции.
 * 2. Управление ресурсами:
 * Прокси может управлять ресурсами, связанными с реальным объектом.
 * Например, прокси может отложить создание или загрузку ресурсоемкого объекта
 * до момента его фактического использования.
 * 3. Удаленный доступ:
 * Прокси может служить промежуточным звеном для обеспечения удаленного доступа к объекту.
 * Например, прокси может обеспечивать сериализацию и передачу объекта по сети.
 * 4. Ленивая инициализация:
 * Прокси может отложить создание или
 * инициализацию реального объекта до момента его первого использования.
 * Это может быть полезно, если создание объекта требует значительных ресурсов
 * или занимает много времени.
 * <p>
 * Минусы паттерна Proxy:
 * 1. Дополнительная сложность:
 * Введение прокси может добавить дополнительную сложность к коду,
 * особенно если требуется создание разных типов прокси для разных ситуаций.
 * Это может усложнить понимание и поддержку кода.
 * 2. Увеличение объема кода:
 * Использование прокси может привести к увеличению объема кода,
 * особенно если требуется создание множества прокси-классов для разных объектов или операций.
 * 3. Влияние на производительность:
 * Прокси может добавить некоторую накладную нагрузку на производительность,
 * особенно если требуется дополнительная логика проверки или обработки запросов.
 * 4. Нарушение инкапсуляции:
 * Использование прокси может нарушить принцип инкапсуляции,
 * так как клиентам может быть известно о наличии прокси и о том,
 * что они работают с прокси-объектом, а не с реальным объектом.
 */

public class Main {
   public static void main(String[] args) {
      Image image1 = new ImageProxy("image1.jpg");
      Image image2 = new ImageProxy("image2.jpg");

      // The real images are loaded and displayed only when necessary
      image1.display();
      image1.display();
      image2.display();
   }
      /*
      Loading image from disk: image1.jpg
      Displaying image: image1.jpg
      Displaying image: image1.jpg
      Loading image from disk: image2.jpg
      Displaying image: image2.jpg
   */
}
