package structural.hopp;

import structural.hopp.remote.RemoteObject;
import structural.hopp.remote.RemoteObjectImpl;

import java.rmi.Naming;
import java.rmi.registry.LocateRegistry;

/**
 * Remote Method Invocation — удаленный вызов методов.
 * <p>
 * Паттерн Half Object plus Protocol (HOP)
 * предоставляет способ управления сложностью распределенных систем
 * путем разделения объектов на локальную
 * и удаленную части и определения протокола для их взаимодействия.
 * <p>
 * Плюсы паттерна:
 * 1. Уменьшение сложности:
 * HOP позволяет разделить сложные объекты на локальные и удаленные части,
 * что упрощает их разработку и понимание.
 * Каждая часть может быть разработана и тестирована независимо от другой.
 * 2. Улучшение производительности:
 * Локальные объекты могут выполняться непосредственно на клиентской машине,
 * что может улучшить производительность и снизить задержку, связанную с удаленными вызовами.
 * 3. Гибкость:
 * HOP позволяет легко заменять или обновлять удаленные объекты без изменения локальных объектов.
 * Это обеспечивает гибкость в разработке и поддержке системы.
 * <p>
 * Минусы паттерна:
 * 1. Комплексность:
 * Разделение объектов на локальные и удаленные части может привести к увеличению сложности системы.
 * Вам нужно управлять двумя различными частями объекта
 * и обеспечивать их взаимодействие через протокол.
 * 2. Зависимость от протокола:
 * HOP требует определения протокола для взаимодействия между локальными и удаленными объектами.
 * Изменение протокола может потребовать изменений во всех объектах, использующих этот протокол.
 * 3. Сложность отладки:
 * При возникновении проблем с взаимодействием между локальными
 * и удаленными объектами может быть сложно определить и исправить ошибки,
 * поскольку они могут быть вызваны проблемами в протоколе или удаленной связи.
 */

public class Server {
   public static void main(String[] args) {
      try {
         // Создание удаленного объекта
         RemoteObject remoteObject = new RemoteObjectImpl();

         // Регистрация удаленного объекта в реестре RMI
         LocateRegistry.createRegistry(1099);
         Naming.rebind("rmi://localhost/RemoteObject", remoteObject);

         System.out.println("Server started");
      } catch (Exception e) {
         e.printStackTrace();
      }
   }
}
