package behavioral.interpreter;

import java.util.*;

/**
 * Плюсы паттерна Interpreter:
 * 1. Гибкость:
 * Паттерн Interpreter позволяет легко добавлять новые грамматические правила и расширять язык,
 * который можно интерпретировать.
 * Каждое правило грамматики может быть представлено отдельным классом,
 * что упрощает добавление новых правил или изменение существующих.
 * 2. Удобство интерпретации:
 * Паттерн Interpreter предоставляет удобный способ интерпретации выражений или языковых конструкций.
 * Он позволяет просто создавать и комбинировать выражения для получения нужного результата.
 * 3. Упрощение грамматики:
 * Паттерн Interpreter помогает разделить грамматику на простые классы,
 * каждый из которых отвечает за одно правило.
 * Это делает грамматику более понятной и легкой для поддержки и сопровождения.
 * <p>
 * Минусы паттерна Interpreter:
 * 1. Сложность грамматики:
 * Если грамматика становится сложной, то классы, отвечающие за правила грамматики,
 * могут разрастаться и усложняться.
 * Это может привести к увеличению сложности кода и затруднить его понимание и поддержку.
 * 2. Производительность:
 * При использовании паттерна может возникнуть некоторое снижение производительности
 * из-за частого создания объектов для представления выражений и их интерпретации.
 * Это особенно важно при работе с большими выражениями или при высоких требованиях к производительности.
 * 3. Ограничения сложности языка:
 * Паттерн Interpreter может быть ограничен в сложности языка, который можно интерпретировать.
 * Если язык становится слишком сложным или требует сложной логики,
 * то паттерн Interpreter может оказаться неэффективным или непрактичным для его интерпретации.
 */

// Example usage
public class Main {
   public static void main(String[] args) {
      // Create the expression: (x + y) - 2
      // AddExpression - NumberExpression
      // LeftExpression - RightExpression
      Expression expression = new SubtractExpression(
          new AddExpression(new VariableExpression("x"), new VariableExpression("y")), // left
          new NumberExpression(2)  // right
      );

      // Создаем контекст и передаем ему выражение
      Context context = new Context(expression);
      Map<String, Integer> variables = new HashMap<>();
      variables.put("x", 20);
      variables.put("y", 5);

      // Интерпретируйте выражение со значениями переменных
      int result = context.interpret(variables);
      System.out.println("Result: " + result); // Output: Result: 23
   }
}
