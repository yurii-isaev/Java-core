package behavioral.command;

/**
 * Плюсы паттерна Command:
 * 1. Разделение ответственности:
 * Паттерн Command позволяет разделить запросы на выполнение операций от объектов,
 * которые их инициируют. Это помогает создать более слабосвязанные системы и
 * упрощает добавление новых команд и
 * изменение существующих команд без вноса изменений в код инициаторов команд.
 * 2. История и отмена операций:
 * Паттерн Command предоставляет возможность сохранять историю выполненных команд,
 * что позволяет реализовать отмену операций и повторное выполнение команд.
 * 3. Гибкость и расширяемость:
 * Паттерн Command позволяет легко добавлять новые команды, не затрагивая существующий код.
 * Это делает систему более гибкой и расширяемой.
 * 4. Упрощение параллельного выполнения:
 * Паттерн Command упрощает параллельное выполнение команд,
 * поскольку каждая команда может выполняться в отдельном потоке или асинхронно.
 * <p>
 * Минусы паттерна Command:
 * 1. Усложнение кода:
 * Использование паттерна Command может привести к увеличению количества классов и сложности кода.
 * В некоторых случаях, когда количество команд велико,
 * это может привести к усложнению понимания и поддержки кода.
 * 2. Дополнительные затраты на память:
 * Каждая команда требует дополнительной памяти для хранения объектов команд и их параметров.
 * Это может привести к дополнительным затратам на память, особенно при работе с большим количеством команд.
 * 3. Необходимость создания множества классов:
 * Для каждой команды необходимо создавать отдельный класс, что может быть неудобно,
 * если требуется большое количество команд или если команды имеют сходную логику.
 * 4. Не всегда подходит для простых операций:
 * Паттерн Command может быть излишним для реализации простых операций,
 * которые не требуют отмены, повторного выполнения или управления историей команд.
 */

public class Main {
   public static void main(String[] args) {
      RemoteControl remoteControl = new RemoteControl();
      Light RoomLight = new Light();

      Command livingRoomLightOn = new LightOnCommand(RoomLight);
      Command livingRoomLightOff = new LightOffCommand(RoomLight);

      remoteControl.setCommand(livingRoomLightOn);
      remoteControl.setCommand(livingRoomLightOff);
      remoteControl.executeCommands();
   }
}
