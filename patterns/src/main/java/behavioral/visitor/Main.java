package behavioral.visitor;

/**
 * Плюсы паттерна Visitor на Java:
 * 1. Расширяемость:
 * Паттерн Visitor позволяет добавлять новые операции к существующим классам элементов,
 * не изменяя их исходный код.
 * Это обеспечивает высокую расширяемость и гибкость при работе с объектами,
 * особенно если иерархия классов элементов стабильна,
 * а операции над ними могут изменяться или добавляться.
 * 2. Разделение операций и структуры:
 * Visitor разделяет операции, выполняемые над элементами, от их структуры.
 * Это упрощает добавление новых операций,
 * так как они могут быть реализованы в отдельных классах Visitor без изменения классов элементов.
 * Также это помогает соблюдать принцип открытости/закрытости (Open/Closed Principle),
 * поскольку структура элементов остается неизменной,
 * и изменения в операциях не влияют на существующий код.
 * 3. Посещение различных типов элементов:
 * Visitor позволяет посещать элементы различных типов, не зная их конкретного типа заранее.
 * Это достигается путем перегрузки методов visit в интерфейсе Visitor для разных типов элементов.
 * Это удобно, если вам нужно выполнить операцию, которая зависит от типа элемента.
 * <p>
 * Минусы паттерна Visitor на Java:
 * 1. Усложнение кода:
 * Использование паттерна Visitor может привести к увеличению сложности кода
 * из-за введения дополнительных классов Visitor и их взаимодействия с классами элементов.
 * Это может усложнить понимание и поддержку кода,
 * особенно для небольших проектов или простых операций.
 * 2. Нарушение инкапсуляции:
 * Поскольку Visitor требует, чтобы операции были определены внутри классов Visitor,
 * это может привести к нарушению принципа инкапсуляции.
 * Классы элементов должны предоставлять публичные методы accept,
 * которые позволяют Visitor получить доступ к своим приватным членам.
 * Это может сделать код менее безопасным и более подверженным ошибкам.
 * 3. Добавление новых типов элементов:
 * Если вам необходимо добавить новый тип элемента в иерархию,
 * вам придется изменить интерфейс Visitor и все его реализации,
 * чтобы добавить новый метод visit для нового типа элемента.
 * Это может быть неудобно и требовать изменений в большом количестве кода.
 */

// Client code
public class Main {
   public static void main(String[] args) {
      Room bathroom = new Bathroom();
      Room bedroom = new Bedroom();

      Visitor visitor = new Owner();

      bathroom.accept(visitor);
      bedroom.accept(visitor);

      /*
      Visitor visits bathroom
      Turn on the Light
      Visitor visits bedroom
      Turn off the Light
      */
   }
}
