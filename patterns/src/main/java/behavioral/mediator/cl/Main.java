package behavioral.mediator.cl;

/**
 * Плюсы паттерна Mediator:
 * 1. Уменьшение связанности (reduced coupling):
 * Паттерн Mediator помогает уменьшить связанность между объектами,
 * заменяя прямые связи между ними на коммуникацию через посредника.
 * Это делает код более гибким и позволяет изменять взаимодействие между объектами, не затрагивая их реализацию.
 * 2. Централизация управления:
 * Паттерн Mediator централизует управление коммуникацией между объектами в одном месте - посреднике.
 * Это упрощает понимание и поддержку взаимодействия между объектами,
 * так как все связанные операции находятся в одном компоненте.
 * 3. Расширяемость:
 * Паттерн Mediator облегчает добавление новых объектов
 * и изменение взаимодействия между существующими объектами.
 * Новые объекты могут быть добавлены без изменения посредника или других коллег,
 * и логика коммуникации может быть изменена только в посреднике,
 * что делает систему более гибкой и расширяемой.
 * 4. Упрощение тестирования:
 * Паттерн Mediator упрощает тестирование объектов,
 * так как их взаимодействие происходит через посредника.
 * Это позволяет легко заменять или создавать фиктивные объекты посредством создания альтернативной реализации посредника.
 * <p>
 * Минусы паттерна Mediator:
 * 1. Усложнение кода:
 * Внедрение посредника и перенос логики коммуникации из объектов в посредника
 * может привести к увеличению сложности кода.
 * Посредник может стать сложным и содержать много логики, что усложняет его понимание и поддержку.
 * 2. Одиночная точка отказа:
 * Посредник становится единой точкой отказа,
 * так как все коммуникации проходят через него. Если посредник не функционирует должным образом,
 * это может привести к проблемам взаимодействия между объектами.
 * 3. Возможные нарушения инкапсуляции:
 * Использование паттерна Mediator может привести к нарушению инкапсуляции,
 * так как объекты должны знать о посреднике и использовать его для коммуникации.
 * Это может увеличить связанность между объектами и усложнить их повторное использование в других контекстах.
 * 4. Усложнение добавления новых объектов:
 * При добавлении новых объектов в систему может потребоваться изменение посредника
 * и существующих коллег, чтобы поддержать их взаимодействие.
 * Это может усложнить добавление новых объектов и требовать изменений во множестве мест в коде.
 */

// Usage example
public class Main {
   public static void main(String[] args) {
      ChatMediator chatMediator = new ChatMediator();

      User user1 = new User("John", chatMediator);
      User user2 = new User("Alice", chatMediator);
      User user3 = new User("Bob", chatMediator);

      chatMediator.addColleague(user1);
      chatMediator.addColleague(user2);
      chatMediator.addColleague(user3);

      user1.sendMessage("Hello, everyone!");
      user2.sendMessage("Hi, John!");
      user3.sendMessage("Hey!");

        /*
        Output:
        John sends: Hello, everyone!
        Alice receives: Hello, everyone!
        Bob receives: Hello, everyone!
        Alice sends: Hi, John!
        John receives: Hi, John!
        Bob receives: Hi, John!
        Bob sends: Hey!
        John receives: Hey!
        Alice receives: Hey!
        */
   }
}
