package behavioral.chainofresponsibility;

/**
 * Плюсы паттерна Chain of Responsibility:
 * 1. Разделение ответственности:
 * Паттерн позволяет разделить обработку запросов между несколькими объектами,
 * каждый из которых может обрабатывать запрос по-своему.
 * Это позволяет создавать гибкую и расширяемую структуру обработки запросов.
 * 2. Гибкость и расширяемость:
 * Паттерн позволяет легко добавлять новые обработчики в цепочку
 * и изменять порядок обработки запросов без изменения клиентского кода.
 * 3. Устранение зависимости между отправителем и получателем:
 * Отправитель не знает, какой именно объект обработает его запрос,
 * а получатель не знает, кто отправил запрос.
 * Это позволяет связывать объекты слабо и обеспечивает гибкую конфигурацию и переиспользование.
 * <p>
 * Минусы паттерна Chain of Responsibility:
 * 1. Возможность неправильной конфигурации цепочки:
 * Если цепочка не настроена правильно или не имеет достаточного количества обработчиков,
 * запрос может остаться без обработки или быть неправильно обработан.
 * 2. Потенциальная низкая производительность:
 * При большом количестве обработчиков в цепочке может возникнуть значительное снижение производительности
 * из-за необходимости проходить по всей цепочке для обработки запроса.
 * 3. Сложность отладки:
 * При наличии сложной цепочки с множеством обработчиков может быть сложно отследить,
 * какой именно обработчик обрабатывает запрос и в каком порядке.
 */

public class Main {
   public static void main(String[] args) {
      Handler stockHandler = new StockAvailabilityHandler();
      Handler creditHandler = new CreditLimitHandler();
      Handler orderHandler = new OrderConfirmationHandler();

      // Устанавливаем цепочку обработчиков
      stockHandler.setNextHandler(creditHandler);
      creditHandler.setNextHandler(orderHandler);

      // Создаем запрос на покупку товара
      Request request = new Request("Book", 1000);

      // Передаем запрос на обработку первому обработчику в цепочке
      stockHandler.handleRequest(request);
   }
}
