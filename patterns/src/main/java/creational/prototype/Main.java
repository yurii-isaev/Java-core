package creational.prototype;

/**
 * Дизайн-паттерн Prototype.
 * <p>
 * Плюсы паттерна Prototype:
 * 1. Создание объектов без явного указания класса:
 * Паттерн Prototype позволяет создавать новые объекты,
 * используя существующий объект в качестве прототипа.
 * Это позволяет создавать объекты без явного указания их класса,
 * что упрощает расширение и добавление новых типов объектов.
 * <p>
 * 2. Уменьшение накладных расходов на создание объектов:
 * Вместо создания объектов с нуля путем выполнения всех необходимых операций,
 * паттерн Prototype позволяет создавать копии существующих объектов,
 * что может значительно уменьшить накладные расходы на создание новых объектов.
 * <p>
 * 3. Гибкость при создании объектов с измененными параметрами:
 * Прототипы могут быть использованы для создания новых объектов с некоторыми изменениями параметров.
 * Это позволяет легко создавать вариации объектов, не повторяя всю логику создания объекта заново.
 * <p>
 * 4. Упрощение добавления новых типов объектов:
 * Добавление новых типов объектов в систему становится проще,
 * поскольку требуется только создание соответствующего прототипа
 * и регистрация его в фабрике или менеджере прототипов.
 * <p>
 * Минусы паттерна Prototype:
 * 1. Сложность при работе с глубоким копированием:
 * Если объекты имеют сложную структуру и содержат ссылки на другие объекты,
 * то требуется правильно реализовать глубокое копирование,
 * чтобы избежать проблем с изменением вложенных объектов в прототипе и его копии.
 * <p>
 * 2. Необходимость поддержки клонирования в классах:
 * Для использования паттерна Prototype объекты должны поддерживать интерфейс клонирования,
 * что может потребовать изменений в классах и добавления методов clone() или copy().
 * <p>
 * 3. Потенциальное увеличение сложности кода:
 * Если применение паттерна Prototype не оправдано в конкретном случае,
 * его использование может привести к увеличению сложности кода и усложнению его понимания.
 */

public class Main {
   public static void main(String[] args) {
      // Создаем прототип объекта
      Rectangle origin = new Rectangle(10, 20);

      try {
         // Создаем копию объекта с помощью клонирования
         Rectangle copy = origin.clone();

         // Меняем размеры копии
         copy.setSize(15, 30);

         // Выводим информацию о прототипе и его копии
         System.out.println("Prototype:");
         System.out.println(origin);
         origin.getInfo();

         System.out.println("Cop:");
         System.out.println(copy);
         copy.getInfo();

      } catch (CloneNotSupportedException e) {
         e.printStackTrace();
      }
   }
}
